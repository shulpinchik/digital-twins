import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import lightgbm as lgb
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from sklearn.model_selection import StratifiedKFold
import numpy as np

# Загрузка данных
df = pd.read_excel("equipment_anomaly_data.xlsx")
df['faulty'] = df['faulty'].astype(int)

# Обработка признаков
numeric_features = ['temperature', 'pressure', 'vibration', 'humidity']
categorical_features = ['equipment']

# Удаление отрицательных значений
df['vibration'] = df['vibration'].apply(lambda x: max(x, 0))

# Масштабирование числовых признаков
scaler = MinMaxScaler()
df[numeric_features] = scaler.fit_transform(df[numeric_features])

# OneHot-кодирование
encoder = OneHotEncoder(sparse_output=False)
encoded = encoder.fit_transform(df[categorical_features])
encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out(categorical_features))
df = pd.concat([df.drop(columns=categorical_features), encoded_df], axis=1)

X = df.drop(columns='faulty')
y = df['faulty']

# K-Fold
kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# Метрики по фолдам
fold_metrics = []

# Feature importance
feature_importance = np.zeros(X.shape[1])

for fold, (train_idx, valid_idx) in enumerate(kf.split(X, y)):
    X_train, X_valid = X.iloc[train_idx], X.iloc[valid_idx]
    y_train, y_valid = y.iloc[train_idx], y.iloc[valid_idx]

    train_data = lgb.Dataset(X_train, label=y_train)
    valid_data = lgb.Dataset(X_valid, label=y_valid)

    params = {
        'objective': 'binary',
        'metric': 'binary_logloss',
        'verbosity': -1,
        'boosting_type': 'gbdt',
        'learning_rate': 0.05,
        'num_leaves': 31
    }

    model = lgb.train(
        params,
        train_data,
        valid_sets=[valid_data],
        num_boost_round=100
    )

    y_pred = model.predict(X_valid)
    y_pred_binary = (y_pred > 0.5).astype(int)

    fold_metrics.append({
        "fold": f"fold{fold}",
        "accuracy": accuracy_score(y_valid, y_pred_binary),
        "precision": precision_score(y_valid, y_pred_binary),
        "recall": recall_score(y_valid, y_pred_binary),
        "f1_score": f1_score(y_valid, y_pred_binary)
    })

    feature_importance += model.feature_importance(importance_type='gain')

mean_importance = feature_importance / kf.get_n_splits()
importance_df = pd.DataFrame({
    'feature': X.columns,
    'importance': mean_importance
}).sort_values(by='importance', ascending=False).head(50)

colors = plt.cm.plasma(np.linspace(0, 1, 50))
plt.figure(figsize=(10, 10))
plt.barh(importance_df['feature'], importance_df['importance'], color=colors)
plt.gca().invert_yaxis()
plt.title("Топ-50 признаков по важности")
plt.xlabel("Gain")
plt.tight_layout()
plt.show()

top_23 = importance_df['feature'].head(23).tolist()
corr = df[top_23].corr()
plt.figure(figsize=(14, 12))
sns.heatmap(
    corr, annot=True, fmt=".2f", cmap="Blues",
    linewidths=0.5, linecolor="white", annot_kws={"size": 7}
)
plt.title("Корреляционная матрица признаков", fontsize=14)
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

metrics_df = pd.DataFrame(fold_metrics)

metrics_df_melted = metrics_df.melt(id_vars='fold', var_name='Метрика', value_name='Значение')
plt.figure(figsize=(10, 6))
sns.barplot(data=metrics_df_melted, x='fold', y='Значение', hue='Метрика')
plt.title("Динамика метрики качества в зависимости от итерации при обучении")
plt.ylabel("Доля корректных ответов")
plt.xlabel("Фолды")
plt.grid(axis='y')
plt.tight_layout()
plt.show()
