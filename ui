from flask import Flask, jsonify, Response, render_template
from pymongo import MongoClient
from prometheus_client import Gauge, generate_latest, CONTENT_TYPE_LATEST
from bson.objectid import ObjectId
from datetime import datetime

app = Flask(__name__)

client = MongoClient("mongodb://mongo:27017")
db = client.dtwins

RISK_SCORE = Gauge('risk_score', 'Последний рассчитанный риск')
RISK_LEVEL = Gauge('risk_level', 'Уровень риска (1=low, 2=medium, 3=high)')

LEVEL_MAP = {
    'low': 1,
    'medium': 2,
    'high': 3
}

def serialize_doc(doc):
    """Рекурсивная сериализация Mongo-объекта в JSON-friendly формат"""
    if isinstance(doc, dict):
        return {k: serialize_doc(v) for k, v in doc.items()}
    elif isinstance(doc, list):
        return [serialize_doc(item) for item in doc]
    elif isinstance(doc, ObjectId):
        return str(doc)
    elif isinstance(doc, datetime):
        return doc.timestamp()
    return doc

@app.route("/last_prediction")
def last_prediction():
    try:
        doc = db.predictions.find_one(sort=[("_id", -1)])
        if not doc:
            return jsonify({"error": "No predictions found"}), 404

        risk_score = doc.get("risk_score")
        risk_level = doc.get("risk_level")

        if isinstance(risk_score, (int, float)):
            RISK_SCORE.set(risk_score)
        if isinstance(risk_level, str) and risk_level.lower() in LEVEL_MAP:
            RISK_LEVEL.set(LEVEL_MAP[risk_level.lower()])

        return jsonify(serialize_doc(doc))

    except Exception as e:
        return jsonify({"error": f"Internal Server Error: {str(e)}"}), 500

@app.route("/metrics")
def metrics():
    return Response(generate_latest(), mimetype=CONTENT_TYPE_LATEST)

@app.route("/dashboard")
def dashboard():
    return render_template("dashboard.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
